<!--pages/demo/demo.wxml-->
<!-- 
    1.  text  相当于以前web中的 span标签 行内元素 不会换行
    2.  view  相当于以前web中的 div标签  块级元素 会换行
    3.  checkbox  相当于以前的复选框
 -->
<text>1</text>
<text>1</text>
<view>1</view>

<!-- 1 字符串 -->
<view>{{msg}}</view>

<!-- 2 数字类型 -->
<view>{{num}}</view>

<!-- 3 bool类型 -->
<view>结果是：{{result}}</view>

<!-- 4 对象类型 -->
<view>{{person.age}}</view>
<view>{{person.name}}</view>

<!-- 5 在标签的属性中使用 -->
<view data-num="{{num}}">自定义属性</view>

<!-- 
    6 使用bool类型充当属性 checked
       - 字符串和花括号之间一定不要存在空格 否则会导致识别失败
       - 以下是错误示范
       - <checkbox checked="   {{result}}"></checkbox>

 -->
<view>
    <checkbox checked="{{result}}"></checkbox>      
</view>
<view>
    
</view>
  


<!-- 
    运算 => 表达式
        - 可以再花括号中 加入 表达式
        - 表达式
          指的是一些简单 运算 数字运算 字符串 拼接 逻辑运算
            + 数字的加减等等
            + 字符串的拼接
            + 三元表达式
        - 语句
          + 复杂的代码段
            * if else
            * switch
            * do while...
            * for ...
-->
<view>
    {{1+1}}
</view>
<view>
    {{'1'+'1'}}
</view>
<view>
    {{ 11%2 === 0 ? '奇数' : '偶数'}}
</view>


<!-- 
    * 列表循环
        + wx:for="{{数组或者对象}}"  wx:for-item="循环项的名称" wx:for-index="循环项的索引"
        + wx:key="唯一的值"   用来提高列表渲染的性能
            - wx:key 绑定一个普通的字符串的时候 那么这个字符串名称肯定是循环数组中的对象的唯一属性
            - wx:key="*this" 当你的数组是一个普通的数组  *this 表示的是循环项 比如 [1,2,3,22,33] ["11","22"."333"]
        + 当出现 数组的嵌套循环的时候 尤其要注意 以下绑定的名称 不要重名
            - wx:for-item="item"  wx:for-index="index"
        + 默认情况下我们不写  wx:for-item="item"  wx:for-index="index"
            - 小程序也会把循环项的名称和索引的名称 认为是 item和index
            - 只有一层循环的话 (wx:for-item="item"  wx:for-index="index") 可以省略

    * 对象循环
        + wx:for="{{数组或者对象}}"  wx:for-item="对象的值" wx:for-index="对象的属性"
        + 循环对象的时候 最好把 item 和 index 的名称都修改一下
            wx:for-item="value" wx:for-index="key"

-->
<view>
    <view wx:for="{{list}}" wx:for-item="item" wx:for-index="index" wx:key="id">
        索引：{{index}}
        --
        值：{{item.name}}
    </view>     
</view>
<view>
    <view>对象循环</view>
    <view wx:for="{{person}}" wx:for-item="value" wx:for-index="key" wx:key="age" >
        属性：{{key}}
        --
        值：{{value}}
    </view> 
</view>

<!-- 
    block 
        + 占位符的标签
        + 写代码的时候 可以看到这标签的存在
        + 页面渲染 小程序会把它移除掉
    当渲染某些数据的时候，如果不想要额外的加上外面的一层标签，可以用block
 -->
<view>
    <block wx:for="{{list}}" wx:for-item="item" wx:for-index="index" wx:key="id" class="my-list">
        索引：{{index}}
        --
        值：{{item.name}}
    </block>     
</view>


<!-- 条件渲染 -->
<!-- 
    wx:if -> 直接把标签从 页面结构给移除掉
        * wx:if="{{true/fase}}"
        * if，else,if else
            wx:if
            wx:elif
            wx:else
        
 -->
 <view>
     <view>条件渲染 wx:if</view>
     <view wx:if="{{true}}">显示</view>
     <view wx:if="{{false}}">隐藏</view> 

     <view wx:if="{{false}}">1</view>
     <view wx:elif="{{false}}">2</view>
     <view wx:else>3</view>
       
 </view>
 <!-- 
    hidden -> 通过添加样式的方式来切换显示
        - 在标签上直接加入属性 hidden
        - hidden="{{true/false}}"
  -->
  <view>
    <view>条件渲染 hidden</view>
    <view >显示</view>
    <view hidden>隐藏</view>
  </view>
<!-- 
    什么场景下用哪个：
        - 当标签不是频繁的切换显示  优先使用 wx:if             
        - 当标签频繁的切换显示的时候  优先使用 hidden
        - hidden属性不要和样式display一起使用
 -->
    
   
  

  
  
 




  